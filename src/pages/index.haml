-# Should add some quotes/testimonials somewhere around here

-# It would be great if we could use :target to highlight the feature
  that the user has clicked
#blurb
  :maruku
    Sass makes CSS fun again.
    Sass is CSS, plus [nested rules](#nesting),
    [variables](#variables), [mixins](#mixins),
    and [more](/docs/yardoc/SASS_REFERENCE.md.html),
    all in a [concise, readable syntax](#beauty).

-# It would be cool if we could have an arrow or something for these
  signifying the transition from CSS to Sass.

  Also, if possible, it would be awesome to use Sass from this site
  for these examples.
.feature#beauty
  %h2 Beauty
  %p
    Sass does away with the unnecessary brackets and semicolons of CSS.
    Properties are nested beneath selectors,
    and each property gets its own line.

  %pre.sass
    :preserve
      h1
        height: 118px
        margin-top: 1em

      .tagline
        font-size: 26px
        text-align: right

  %pre.css
    :preserve
      h1 {
        height: 118px;
        margin-top: 1em;
      }

      .tagline {
        font-size: 26px;
        text-align: right;
      }

.feature#nesting
  %h2 Nesting
  %p
    Sass avoids repetition by nesting selectors within one another.
    The same thing works with properties.

  %pre.sass
    :preserve
      table.highlighttable
        margin: 2em 0
        td.linenos
          text-align: right

      li
        background:
          repeat: no-repeat
          position: left center
          image: url(/images/icons/download.png)

  %pre.css
    :preserve
      table.highlighttable {
        margin: 2em 0;
      }
      table.highlighttable td.linenos {
        text-align: right;
      }

      li {
        background-repeat: no-repeat;
        background-position: left center;
        background-image: url(/images/icons/download.png);
      }

.feature#variables
  %h2 Variables
  %p
    Use the same color all over the place?
    Need to do some math with height and width and text size?
    Sass supports variables as well as basic math operations.

  %pre.sass
    :preserve
      !blue = #3bbfce
      !margin = 16px

      .content_navigation
        background-color = !blue
        color = !blue - #101010

      .border
        padding-right = !margin / 2 - 1
        margin-right = !margin / 2
        border-right = 1px "solid" !blue

  %pre.css
    :preserve
      .content_navigation {
        background-color: #3bbfce;
        color: #2bafbe;
      }

      .border {
        padding-right: 7px;
        margin-right: 8px;
        border-right: 1px solid #3bbfce;
      }

.feature#mixins
  %h2 Mixins
  %p
    Even more powerful than variables,
    mixins allow you to re-use whole chunks of CSS,
    properties or selectors.
    You can even give them arguments.

  %pre.sass
    :preserve
      =table-scaffolding
        th
          :text-align center
          :font-weight bold
        td, th
          :padding 2px

      =background(!img)
        background:
          image = image_url(!img)
          repeat: no-repeat

      table#data
        +background("/images/table.png")
        +table-scaffolding

  %pre.css
    :preserve
      table#data {
        background-image: image_url(/images/table.png);
        background-repeat: no-repeat;
      }
      table#data th {
        text-align: center;
        font-weight: bold;
      }
      table#data td, table#data th {
        padding: 2px;
      }
