#blurb
  :maruku
    **Sass makes CSS fun again**.
    Sass is an extension of CSS3,
    adding [nested rules](#nesting), [variables](#variables),
    [mixins](#mixins), [selector inheritance](#extend),
    and [more](/docs/yardoc/file.SASS_REFERENCE.html).
    It's translated to well-formatted, standard CSS
    using the command line tool or a web-framework plugin.

    Sass has two syntaxes.
    The new main syntax (as of Sass 3) is known as "SCSS" (for "Sassy CSS"),
    and is a superset of CSS3's syntax.
    This means that every valid CSS3 stylesheet is valid SCSS as well.
    SCSS files use the extension `.scss`.

    The second, older syntax is known as
    [the indented syntax](/docs/yardoc/file.INDENTED_SYNTAX.html) (or just "Sass").
    Inspired by [Haml](http://haml-lang.com)'s terseness,
    it's intended for people who prefer conciseness over similarity to CSS.
    Instead of brackets and semicolons,
    it uses the indentation of lines to specify blocks.
    Files in the indented syntax use the extention `.sass`.

.feature#variables
  %h2 Variables
  %p
    Use the same color all over the place?
    Need to do some math with height and width and text size?
    Sass supports variables as well as basic math operations
    and <a href="/docs/yardoc/Sass/Script/Functions.html">many useful functions</a>.

  %pre.sass
    :preserve
      // SCSS

      $blue: #3bbfce;
      $margin: 16px;

      .content-navigation {
        border-color: $blue;
        color:
          darken($blue, 10%);
      }

      .border {
        padding: $margin / 2;
        margin: $margin / 2;
        border-color: $blue;
      }

  %pre.css
    :preserve
      /* CSS */

      .content-navigation {
        border-color: #3bbfce;
        color: #2b9eab;
      }

      .border {
        padding: 8px;
        margin: 8px;
        border-color: #3bbfce;
      }

.feature#nesting
  %h2 Nesting
  %p
    Sass avoids repetition by nesting selectors within one another.
    The same thing works with properties.

  %pre.sass
    :preserve
      // SCSS

      table.hl {
        margin: 2em 0;
        td.ln {
          text-align: right;
        }
      }

      li {
        font: {
          family: serif;
          weight: bold;
          size: 1.2em;
        }
      }

  %pre.css
    :preserve
      /* CSS */

      table.hl {
        margin: 2em 0;
      }
      table.hl td.ln {
        text-align: right;
      }

      li {
        font-family: serif;
        font-weight: bold;
        font-size: 1.2em;
      }

.feature#mixins
  %h2 Mixins
  %p
    Even more useful than variables,
    mixins allow you to re-use whole chunks of CSS,
    properties or selectors.
    You can even give them arguments.

  %pre.sass
    :preserve
      // SCSS

      @mixin table-base {
        th {
          text-align: center;
          font-weight: bold;
        }
        td, th {padding: 2px}
      }

      @mixin left($dist) {
        float: left;
        margin-left: $dist;
      }

      #data {
        @include left(10px);
        @include table-base;
      }

  %pre.css
    :preserve
      /* CSS */

      #data {
        float: left;
        margin-left: 10px;
      }
      #data th {
        text-align: center;
        font-weight: bold;
      }
      #data td, #data th {
        padding: 2px;
      }

.feature#extend
  %h2 Selector Inheritance
  %p
    Sass can tell one selector to inherit all the styles of another
    without duplicating the CSS properties.

  %pre.sass
    :preserve
      // SCSS

      .error {
        border: 1px #f00;
        background: #fdd;
      }
      .error.intrusion {
        font-size: 1.3em;
        font-weight: bold;
      }

      .badError {
        @extend .error;
        border-width: 3px;
      }

  %pre.css
    :preserve
      /* CSS */

      .error, .badError {
        border: 1px #f00;
        background: #fdd;
      }

      .error.intrusion,
      .badError.intrusion {
        font-size: 1.3em;
        font-weight: bold;
      }

      .badError {
        border-width: 3px;
      }
