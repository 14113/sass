-# It would be great if we could use :target to highlight the feature
  that the user has clicked
#blurb
  :maruku
    Sass makes CSS fun again.
    Sass is CSS, plus [nested rules](#nesting),
    [variables](#variables), [mixins](#mixins),
    and [more](/docs/yardoc/SASS_REFERENCE.md.html),
    all in a [concise, readable syntax](#beauty).

:maruku
  <p class="quote" markdown="1">
    "Using SASS has not only improved my CSS, but also the page
    structure/layout, and decreased IE headaches. Super highly
    recommended."
    - [Matt Darby](https://twitter.com/mattdarby/status/1737336511)
  </p>

  <p class="quote" markdown="1">
    "If I were to write a post about how much Haml and Sass have
    changed the way I develop for the web ... I'd write an elaborate
    sonnet about how Sass makes CSS almost usable for developers who
    like to keep things DRY."
    - [Jack Canty, Hoopla!](http://6brand.com/converting-css-to-sass-files.html)
  </p>

  <p class="quote" markdown="1">
    "I am a huge fan of Sass (Syntactically Awesome Stylesheets) for
    styling Rails applications. I have been using it on all of my
    projects for quite a while now and have developed some great
    techniques that make it much easier to organize, write, and read
    stylesheets in an application. ... Sass retains most of the same
    "feel" when writing the code as vanilla CSS. It simply adds more
    power and better organizational tools, making it an easy choice as a
    go-to replacement."
    - [Michael Bleigh, Intridea](http://www.intridea.com/2009/2/4/sass-the-better-more-powerful-css)
  </p>

-# It would be cool if we could have an arrow or something for these
  signifying the transition from CSS to Sass.

  Also, if possible, it would be awesome to use Sass from this site
  for these examples.
.feature#beauty
  %h2 Beauty
  %p
    Sass does away with the unnecessary brackets and semicolons of CSS.
    Properties are nested beneath selectors,
    and each property gets its own line.

  %pre.sass
    :preserve
      h1
        height: 118px
        margin-top: 1em

      .tagline
        font-size: 26px
        text-align: right

  %pre.css
    :preserve
      h1 {
        height: 118px;
        margin-top: 1em;
      }

      .tagline {
        font-size: 26px;
        text-align: right;
      }

.feature#nesting
  %h2 Nesting
  %p
    Sass avoids repetition by nesting selectors within one another.
    The same thing works with properties.

  %pre.sass
    :preserve
      table.highlighttable
        margin: 2em 0
        td.linenos
          text-align: right

      li
        background:
          repeat: no-repeat
          position: left center
          color: #f8f8f8

  %pre.css
    :preserve
      table.highlighttable {
        margin: 2em 0;
      }
      table.highlighttable td.linenos {
        text-align: right;
      }

      li {
        background-repeat: no-repeat;
        background-position: left center;
        background-image: #f8f8f8;
      }

.feature#variables
  %h2 Variables
  %p
    Use the same color all over the place?
    Need to do some math with height and width and text size?
    Sass supports variables as well as basic math operations.

  %pre.sass
    :preserve
      !blue = #3bbfce
      !margin = 16px

      .content_navigation
        background-color = !blue
        color = !blue - #101010

      .border
        padding-right = !margin / 2 - 1
        margin-right = !margin / 2
        border-right = 1px "solid" !blue

  %pre.css
    :preserve
      .content_navigation {
        background-color: #3bbfce;
        color: #2bafbe;
      }

      .border {
        padding-right: 7px;
        margin-right: 8px;
        border-right: 1px solid #3bbfce;
      }

.feature#mixins
  %h2 Mixins
  %p
    Even more powerful than variables,
    mixins allow you to re-use whole chunks of CSS,
    properties or selectors.
    You can even give them arguments.

  %pre.sass
    :preserve
      =table-scaffolding
        th
          :text-align center
          :font-weight bold
        td, th
          :padding 2px

      =background(!img)
        background:
          image = image_url(!img)
          repeat: no-repeat

      table#data
        +background("table.png")
        +table-scaffolding

  %pre.css
    :preserve
      table#data {
        background-image:
          url(/images/table.png);
        background-repeat: no-repeat;
      }
      table#data th {
        text-align: center;
        font-weight: bold;
      }
      table#data td, table#data th {
        padding: 2px;
      }
