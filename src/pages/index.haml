-# It would be great if we could use :target to highlight the feature
  that the user has clicked
#blurb
  :maruku
    Sass makes CSS fun again.
    Sass is CSS, plus [nested rules](#nesting),
    [variables](#variables), [mixins](#mixins),
    and [more](/docs/yardoc/SASS_REFERENCE.md.html),
    all in a [concise, readable syntax](#beauty).

:maruku
  <blockquote cite="https://twitter.com/mattdarby/status/1737336511" markdown="1">
    "Using SASS has not only improved my CSS, but also the page
    structure/layout, and decreased IE headaches. Super highly
    recommended."
    - [Matt Darby](https://twitter.com/mattdarby/status/1737336511)
  </blockquote>

  <blockquote cite="http://6brand.com/converting-css-to-sass-files.html" markdown="1">
    "If I were to write a post about how much Haml and Sass have
    changed the way I develop for the web ... I'd write an elaborate
    sonnet about how Sass makes CSS almost usable for developers who
    like to keep things DRY."
    - [Jack Canty, Hoopla!](http://6brand.com/converting-css-to-sass-files.html)
  </blockquote>

  <blockquote cite= "http://www.intridea.com/2009/2/4/sass-the-better-more-powerful-css" markdown="1">
    "I am a huge fan of Sass (Syntactically Awesome Stylesheets) for
    styling Rails applications. I have been using it on all of my
    projects for quite a while now and have developed some great
    techniques that make it much easier to organize, write, and read
    stylesheets in an application. ... Sass retains most of the same
    "feel" when writing the code as vanilla CSS. It simply adds more
    power and better organizational tools, making it an easy choice as a
    go-to replacement."
    - [Michael Bleigh, Intridea](http://www.intridea.com/2009/2/4/sass-the-better-more-powerful-css)
  </blockquote>

.feature#beauty
  %h2 Beauty
  %p
    Sass does away with the unnecessary brackets and semicolons of CSS.
    Properties are nested beneath selectors,
    and each property gets its own line.

  %pre.sass
    :preserve
      // Sass

      h1
        height: 118px
        margin-top: 1em

      .tagline
        font-size: 26px
        text-align: right

  %pre.css
    :preserve
      /* CSS */

      h1 {
        height: 118px;
        margin-top: 1em;
      }

      .tagline {
        font-size: 26px;
        text-align: right;
      }

.feature#nesting
  %h2 Nesting
  %p
    Sass avoids repetition by nesting selectors within one another.
    The same thing works with properties.

  %pre.sass
    :preserve
      // Sass

      table.hl
        margin: 2em 0
        td.ln
          text-align: right

      li
        font:
          family: serif
          weight: bold
          size: 1.2em

  %pre.css
    :preserve
      /* CSS */

      table.hl {
        margin: 2em 0;
      }
      table.hl td.ln {
        text-align: right;
      }

      li {
        font-family: serif;
        font-weight: bold;
        font-size: 1.2em;
      }

.feature#variables
  %h2 Variables
  %p
    Use the same color all over the place?
    Need to do some math with height and width and text size?
    Sass supports variables as well as basic math operations.

  %pre.sass
    :preserve
      // Sass

      !blue = #3bbfce
      !margin = 16px

      .content_navigation
        border-color = !blue
        color = !blue - #111

      .border
        padding = !margin / 2
        margin = !margin / 2
        border-color = !blue

  %pre.css
    :preserve
      /* CSS */

      .content_navigation {
        border-color: #3bbfce;
        color: #2aaebd;
      }

      .border {
        padding: 8px;
        margin: 8px;
        border-color: #3bbfce;
      }

.feature#mixins
  %h2 Mixins
  %p
    Even more powerful than variables,
    mixins allow you to re-use whole chunks of CSS,
    properties or selectors.
    You can even give them arguments.

  %pre.sass
    :preserve
      // Sass

      =table-scaffolding
        th
          text-align: center
          font-weight: bold
        td, th
          padding: 2px

      =left(!dist)
        float: left
        margin-left = !dist

      #data
        +left(10px)
        +table-scaffolding

  %pre.css
    :preserve
      /* CSS */

      #data {
        float: left;
        margin-left: 10px;
      }
      #data th {
        text-align: center;
        font-weight: bold;
      }
      #data td, #data th {
        padding: 2px;
      }
